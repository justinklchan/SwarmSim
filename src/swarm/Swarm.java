/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package swarm;

import java.awt.Color;
import java.awt.Graphics;
import java.util.LinkedList;
import java.util.Random;
import javax.swing.JPanel;

/**
 *
 * @author chanjustin
 */
public class Swarm extends javax.swing.JFrame {

    /**
     * Creates new form Swarm
     */
    public Swarm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CustomPanel = new SimPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout CustomPanelLayout = new javax.swing.GroupLayout(CustomPanel);
        CustomPanel.setLayout(CustomPanelLayout);
        CustomPanelLayout.setHorizontalGroup(
            CustomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        CustomPanelLayout.setVerticalGroup(
            CustomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(CustomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(CustomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    class SimPanel extends JPanel
    {
        int RAND_SEED = 20;
        Random random;
        int nBots = 40;
        LinkedList<Bot> bots;
        boolean spawned = false;
        int botSize = 10;
        
        public SimPanel()
        {
            super();
            random = new Random(RAND_SEED);
            bots = new LinkedList<Bot>();
        }
        
        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            if(!spawned)
            {
                int x=0;
                int y=0;
                int w=100;
                int h=100;
                packSpawnInArea(x, y, w, h);
                g.drawRect(x, y, w, h);
                spawned = true;
            }
            
            g.setColor(Color.black);
            for(Bot bot : bots)
            {
                g.drawOval((int)bot.x, (int)bot.y, bot.size, bot.size);
            }
        }
        
        //pack bots in a given area
        public void packSpawnInArea(int x, int y, int width, int height)
        {
            int xTimes = width/botSize;
            int yTimes = height/botSize;
            
            for(int i = 0; i < xTimes; i++)
            {
                for(int j = 0; j < yTimes; j++)
                {
                    bots.add(new Bot(x+botSize*i,y+botSize*j,botSize));
                }
            }
            
            nBots = bots.size();
        }
        
        //randomly spawn in a given area
        public void randomSpawnInArea(int x, int y, int width, int height)
        {
            int minX = x;
            int maxX = x+width;
            int minY = y;
            int maxY = y+height;
            long t1 = System.nanoTime();
            boolean timeout = false;
            
            for(int i = 0; i < nBots; i++)
            {
                Bot bot = new Bot(
                            minX+random.nextInt(maxX-botSize),
                            minY+random.nextInt(maxY-botSize),
                            botSize);
                
                while(bot.overlaps(bots))
                {
                    if(System.nanoTime()-t1 >= 1000000000)
                    {
                        timeout = true;
                        break;
                    }
                    bot = new Bot(
                            minX+random.nextInt(maxX-botSize),
                            minY+random.nextInt(maxY-botSize),
                            botSize);
                }
                if(timeout)
                {
                    break;
                }
                
                bots.add(bot);
            }
        }
        
        //randomly spawn around canvas
        public void randomSpawn()
        {
            for(int i = 0; i < nBots; i++)
            {
                Bot bot = new Bot(
                            random.nextInt(getWidth()-botSize),
                            random.nextInt(getHeight()-botSize),
                            botSize);
                
                while(bot.overlaps(bots))
                {
                    bot = new Bot(
                            random.nextInt(getWidth()-botSize),
                            random.nextInt(getHeight()-botSize),
                            botSize);
                }
                
                bots.add(bot);
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Swarm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Swarm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Swarm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Swarm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Swarm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CustomPanel;
    // End of variables declaration//GEN-END:variables
}
